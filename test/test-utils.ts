import {expect} from 'chai';
import * as _ from 'lodash';
import {normalize, concatBits} from '../src/utils';

describe('utils', () => {

  it('normalize bit stream', () => {
    expect(normalize(Buffer.from([0xF5]), 7))
      .to.eql(Buffer.from([0x00, 0x00, 0x00, 0x75]));
    expect(normalize(Buffer.from([0xE0, 0xE0, 0xE0, 0xE0]), 32))
      .to.eql(Buffer.from([0xE0, 0xE0, 0xE0, 0xE0]));
    expect(normalize(Buffer.from([0xBA, 0xE0, 0xE0, 0xE0, 0xE0]), 36))
      .to.eql(Buffer.from([0x00, 0x00, 0x00, 0x0A, 0xE0, 0xE0, 0xE0, 0xE0]));
    expect(normalize(Buffer.from([0x11, 0x11, 0x11, 0xEF, 0xAB, 0xCD, 0xEF, 0xAB]), 36))
      .to.eql(Buffer.from([0x00, 0x00, 0x00, 0x0F, 0xAB, 0xCD, 0xEF, 0xAB]));
  });

  it('concatenate two bit streams', () => {
    expect(concatBits(
      Buffer.from([0b00100101]), 6,
      Buffer.from([0b00010010]), 5)
    ).to.eql(Buffer.from([0x00, 0x00, 0b00000100, 0b10110010]));
    expect(concatBits(
      Buffer.from([0xEF, 0xAB, 0xCD, 0xEF, 0xAB]), 36,
      Buffer.from([0xF0, 0x12, 0x34, 0x56, 0x78]), 36)
    ).to.eql(Buffer.from([0x00, 0x00, 0x00, 0xFA, 0xBC, 0xDE, 0xFA, 0xB0, 0x12, 0x34, 0x56, 0x78]));
  });

  it('cononcatenate two bit streams without padding', () => {
    expect(concatBits(
      Buffer.from([0xEF, 0xAB, 0xCD, 0xEF, 0xAB]), 8,
      Buffer.from([0x12, 0x34, 0x56, 0x78]), 32)
    ).to.eql(Buffer.from([0x00, 0x00, 0x00, 0xAB, 0x12, 0x34, 0x56, 0x78]));
  });

  it('concatenate ignore unused bits at the front of first stream', () => {
    expect(concatBits(
      Buffer.from([0x11, 0x11, 0x11, 0xEF, 0xAB, 0xCD, 0xEF, 0xAB]), 36,
      Buffer.from([0x34, 0x56, 0x78]), 24)
    ).to.eql(Buffer.from([0x0F, 0xAB, 0xCD, 0xEF, 0xAB, 0x34, 0x56, 0x78]));
  });

  it('concatenate ignore unused bits at the front of second stream', () => {
    expect(concatBits(
      Buffer.from([0x34, 0x56, 0x78]), 24,
      Buffer.from([0x11, 0x11, 0x11, 0xEF, 0xAB, 0xCD, 0xEF, 0xAB]), 36)
    ).to.eql(Buffer.from([0x03, 0x45, 0x67, 0x8F, 0xAB, 0xCD, 0xEF, 0xAB]));
  });

});
